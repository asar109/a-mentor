// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)
  categoryId String?
  category Category? @relation(fields: [categoryId] , references: [id])
  attachment Attachment[]
  chapters Chapter[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String
  courseId String
  course Course @relation(fields: [courseId] , references: [id] , onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model Category {
  id String @id @default(uuid())
  name String
  courses Course[]
}


model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  position Int
  videoUrl String? @db.Text
  userProgress UserProgress[]
  courseId String
  muxData MuxData?
  course Course @relation(fields: [courseId] , references: [id] , onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}


model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String?
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId] , references: [id] , onDelete: Cascade)
}


model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String
  chapter Chapter @relation(fields: [chapterId] , references: [id] , onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
  @@unique([userId, chapterId])
}




model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId] , references: [id] , onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])

}


model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



